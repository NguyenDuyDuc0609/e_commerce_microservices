// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductService.Infrastructure.Persistences;

#nullable disable

namespace ProductService.Infrastructure.Migrations
{
    [DbContext(typeof(ProductContext))]
    [Migration("20250803075447_UpdateNavigation")]
    partial class UpdateNavigation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductService.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DiscountName")
                        .HasColumnType("text");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId", "Price")
                        .HasDatabaseName("IX_CategoryId_Price");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.ProductDiscount", b =>
                {
                    b.Property<Guid>("ProductDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductDiscountId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDiscounts");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId", "CreatedAt")
                        .HasDatabaseName("IX_ProductId_CreateAt");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.SKU", b =>
                {
                    b.Property<Guid>("SKUId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("SKUCode")
                        .HasColumnType("text");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("SKUId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_SKU_ProductId");

                    b.ToTable("SKUs");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.SKUAttribute", b =>
                {
                    b.Property<Guid>("SKUAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeName")
                        .HasColumnType("text");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("text");

                    b.Property<Guid>("SKUId")
                        .HasColumnType("uuid");

                    b.HasKey("SKUAttributeId");

                    b.HasIndex("SKUId")
                        .HasDatabaseName("IX_SKUAttribute_SKUId");

                    b.ToTable("SKUAtrributes");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Product", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ProductService.Domain.Entities.ProductAttribute", "ProductAttributes", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AttributeName")
                                .HasColumnType("text");

                            b1.Property<string>("AttributeValue")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProductId", "AttributeName");

                            b1.ToTable("ProductAttribute");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("ProductService.Domain.Entities.ProductRatingSummary", "_ratingSummary", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<double>("AverageRating")
                                .HasColumnType("double precision");

                            b1.Property<int>("FiveStarCount")
                                .HasColumnType("integer");

                            b1.Property<int>("FourStarCount")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("LastReviewedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("OneStarCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ThreeStarCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReviews")
                                .HasColumnType("integer");

                            b1.Property<int>("TwoStarCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Category");

                    b.Navigation("ProductAttributes");

                    b.Navigation("_ratingSummary");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.ProductDiscount", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Discount", "Discount")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductService.Domain.Entities.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Review", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.SKU", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Product", "Product")
                        .WithMany("SKUs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.SKUAttribute", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.SKU", "SKU")
                        .WithMany("SKUAttributes")
                        .HasForeignKey("SKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SKU");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Discount", b =>
                {
                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductDiscounts");

                    b.Navigation("Reviews");

                    b.Navigation("SKUs");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.SKU", b =>
                {
                    b.Navigation("SKUAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
